from aiogram import types, Dispatcher, Bot
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from database import Database
from config import TOKEN, ADMINS
from states import *
from kb import *

bot = Bot(TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
base = Database()


@dp.message_handler(commands=['start'])
async def start_command_handler(message: types.Message):
    await bot.send_message(message.from_user.id,
                           text='–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç. –¢—É—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                           reply_markup=start)


@dp.callback_query_handler(lambda c: c.data == 'cities_list')
async def choise_city(callback: types.CallbackQuery):
    """–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞—Ö"""
    await callback.answer()
    cities = get_cities_keyboard(base)
    await bot.edit_message_text(chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                text='–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:',
                                reply_markup=cities)


@dp.callback_query_handler(lambda c: c.data == 'new_city')
async def new_city(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥"""
    await callback.answer()
    await state.set_state(City.city)

    await bot.edit_message_text(chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                text='–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:',
                                reply_markup=back)


@dp.message_handler(state=City.city)
async def process_new_city(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    city = message.text

    if not base.get_city(city):
        base.create_table(city)
        await bot.send_message(message.from_user.id,
                               text=f'–ì–æ—Ä–æ–¥ "{city}" –¥–æ–±–∞–≤–ª–µ–Ω!',
                               reply_markup=city_add)
        await state.finish()
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'–ì–æ—Ä–æ–¥ "{city}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!',
                               reply_markup=back)
        await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('back'), state='*')
async def cancel_fsm(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–π—Ç–∏ –∏–∑ FSM"""
    await callback.answer()
    await state.finish()
    if callback.data == 'back':
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text='–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç. –¢—É—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                                    reply_markup=start)
    else:
        await bot.send_message(chat_id=callback.from_user.id,
                               text='–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç. –¢—É—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                               reply_markup=start)


@dp.message_handler(commands=['config'])
async def config(message: types.Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if message.from_user.id in ADMINS:
        await bot.send_message(chat_id=message.from_user.id,
                               text='–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:',
                               reply_markup=config_kb)
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text='üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ üö´',
                               reply_markup=back)


@dp.callback_query_handler(lambda c: c.data.startswith('city_'))
async def city_callback(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º"""
    await callback.answer()
    city_name = callback.data.replace('city_', '')

    async with state.proxy() as data:
        data['current_city'] = city_name

    if callback.from_user.id in ADMINS:
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text=f'–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {city_name}',
                                    reply_markup=admim_city_config)
    else:
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text=f'–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {city_name}. –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ?',
                                    reply_markup=ready_to_work)


@dp.callback_query_handler(lambda c: c.data == 'jobs')
async def jobs(callback: types.CallbackQuery):
    """–†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    await callback.answer()
    await bot.edit_message_text(chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:',
                                reply_markup=jobs_config)


@dp.callback_query_handler(lambda c: c.data == 'delete_city', state='*')
async def delete_city(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""
    data = await state.get_data()
    current_city = data.get('current_city')

    if base.delete_city(current_city):
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text=f'–ì–æ—Ä–æ–¥: {current_city} —É–¥–∞–ª–µ–Ω',
                                    reply_markup=back)
    else:
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text=f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞: {current_city}',
                                    reply_markup=back)
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'new_job')
async def new_job(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    await callback.answer()
    await bot.send_message(callback.from_user.id,
                           text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É:',
                           reply_markup=back)
    await state.set_state(Job.image)


@dp.message_handler(content_types=types.ContentType.PHOTO, state=Job.image)
async def process_image(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏"""
    async with state.proxy() as data:
        data['image'] = message.photo[0].file_id

    await state.set_state(Job.text)
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–∏—è:')


@dp.message_handler(state=Job.text)
async def save_job(message: types.Message, state: FSMContext):
    """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    async with state.proxy() as data:
        data['text'] = message.text
        current_city = data.get('current_city')
        if not base.get_job(current_city, data['text']):
            base.new_job(current_city, data['image'], data['text'], status=1)
            await bot.send_message(message.from_user.id, '–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ',
                                   reply_markup=job_add)
        else:
            await bot.send_message(message.from_user.id,
                                   f'–ó–∞–¥–∞–Ω–∏–µ —Å id: {data["text"]} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ',
                                   reply_markup=job_add)
        await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'get_job')
async def get_jobs(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è"""
    await callback.answer()
    state_data = await state.get_data()
    city = state_data.get('current_city')
    jobs_kb = get_jobs_kb(base, city)

    await bot.edit_message_text(chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                text='–í—Å–µ –∑–∞–¥–∞–Ω–∏—è:',
                                reply_markup=jobs_kb)


@dp.callback_query_handler(lambda c: c.data.startswith('job_'))
async def jods_view(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º"""
    await callback.answer()

    job_id = callback.data.replace('job_', '')
    state_data = await state.get_data()
    city = state_data.get('current_city')

    async with state.proxy() as data:
        data['job_id'] = job_id

    photo = base.get_photo(city, job_id)

    await bot.send_photo(chat_id=callback.from_user.id,
                         photo=photo[0],
                         caption=f'–í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {job_id}',
                         reply_markup=kb_job_photo)


@dp.callback_query_handler(lambda c: c.data == 'delete_job_photo', state='*')
async def delete_job_fucn(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    await callback.answer()
    data = await state.get_data()
    city = data.get('current_city')
    job_id = data.get('job_id')
    base.delete_job(city, job_id)

    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'–ó–∞–¥–∞–Ω–∏–µ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º "{job_id}" —É–¥–∞–ª–µ–Ω–æ',
                           reply_markup=delete_job)


@dp.callback_query_handler(lambda c: c.data == 'start_job', state='*')
async def start_work(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    await bot.edit_message_text(chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                text='–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç\n'
                                     '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é',
                                reply_markup=back)
    await state.set_state(User.first_report)


@dp.message_handler(content_types=types.ContentType.PHOTO, state=User.first_report)
async def first_report(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã"""
    async with state.proxy() as data:
        data['first_report_image'] = message.photo[0].file_id

    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª –ø–æ –æ—Ç—á–µ—Ç–∞–º"""

    await state.set_state(User.start_working)
    await bot.send_message(chat_id=message.from_user.id,
                           text='–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ',
                           reply_markup=start_working
                           )


@dp.callback_query_handler(lambda c: c.data == 'start_work', state=User.start_working)
async def started_work(callback: types.CallbackQuery, state: FSMContext):
    """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    await callback.answer()
    await bot.edit_message_text(chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                text='–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —à–∞–±–ª–æ–Ω—É –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ —Ñ–æ—Ç–æ\n',
                                )
    with open('images/template.jpg', 'rb') as photo:
        await bot.send_photo(chat_id=callback.from_user.id, photo=types.InputFile(photo), reply_markup=back)
