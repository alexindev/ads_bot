import asyncio
import time

from aiogram import types, Dispatcher, Bot
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

from db.database import Database
from config import TOKEN, ADMINS, GROUP_CHAT_ID
from state.states import *
from keyboard.kb import *


bot = Bot(TOKEN, parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
base = Database()


@dp.message_handler(commands=['start'])
async def start_command_handler(message: types.Message):
    await bot.send_message(message.from_user.id,
                           text='–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç. –¢—É—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                           reply_markup=start)


@dp.callback_query_handler(lambda c: c.data == 'cities_list')
async def choise_city(callback: types.CallbackQuery):
    """–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞—Ö"""
    await callback.answer()
    cities = get_cities_keyboard(base)
    await bot.edit_message_text(chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                text='–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:',
                                reply_markup=cities)


@dp.callback_query_handler(lambda c: c.data == 'new_city')
async def new_city(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥"""
    await callback.answer()
    await state.set_state(City.city)

    await bot.edit_message_text(chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                text='–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:',
                                reply_markup=back)


@dp.message_handler(state=City.city)
async def process_new_city(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    city = message.text

    if not base.get_city(city):
        base.create_table(city)
        await bot.send_message(message.from_user.id,
                               text=f'–ì–æ—Ä–æ–¥ "{city}" –¥–æ–±–∞–≤–ª–µ–Ω!',
                               reply_markup=city_add)
        await state.finish()
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'–ì–æ—Ä–æ–¥ "{city}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!',
                               reply_markup=back)
        await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('back'), state='*')
async def cancel_fsm(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–π—Ç–∏ –∏–∑ FSM"""
    await callback.answer()
    if callback.data == 'back':
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text='–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç. –¢—É—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                                    reply_markup=start)
        await state.finish()

    elif callback.data == 'back_new':
        await bot.send_message(chat_id=callback.from_user.id,
                               text='–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç. –¢—É—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                               reply_markup=start)
        await state.finish()

    elif callback.data == 'back_job':
        async with state.proxy() as data:
            city = data.get('current_city')
            job_id = data.get('job_id')

        base.update_job_status(city, job_id, status=1)
        await bot.send_message(chat_id=callback.from_user.id,
                               text='–ú–∞—Ä—à—Ä—É—Ç –æ—Ç–º–µ–Ω–µ–Ω',
                               reply_markup=start)
        await bot.send_message(chat_id=GROUP_CHAT_ID,
                               text=f'–†–∞–±–æ—Ç–Ω–∏–∫ <a href="tg://user?id={callback.from_user.id}">{callback.from_user.full_name}</a> –æ—Ç–º–µ–Ω–∏–ª –º–∞—Ä—à—Ä—É—Ç\n'
                                    f'–ì–æ—Ä–æ–¥: {city}\n'
                                    f'–ú–∞—Ä—à—Ä—É—Ç: # {job_id}\n'
                               )
        await state.finish()


@dp.message_handler(commands=['config'])
async def config(message: types.Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if message.from_user.id in ADMINS:
        await bot.send_message(chat_id=message.from_user.id,
                               text='–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:',
                               reply_markup=config_kb)
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text='üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ üö´',
                               reply_markup=back)


@dp.callback_query_handler(lambda c: c.data.startswith('city_'))
async def city_callback(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º"""
    await callback.answer()
    city_name = callback.data.replace('city_', '')

    async with state.proxy() as data:
        data['current_city'] = city_name

    if callback.from_user.id in ADMINS:
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text=f'–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {city_name}',
                                    reply_markup=admim_city_config)
        await state.set_state(Admin.job)
    else:
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text=f'–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {city_name}. –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ?',
                                    reply_markup=ready_to_work)


@dp.callback_query_handler(lambda c: c.data == 'delete_city', state=Admin.job)
async def delete_city(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""
    await callback.answer()

    async with state.proxy() as data:
        current_city = data.get('current_city')

    if base.delete_city(current_city):
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text=f'–ì–æ—Ä–æ–¥: {current_city} —É–¥–∞–ª–µ–Ω',
                                    reply_markup=back)
    else:
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text=f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞: {current_city}',
                                    reply_markup=back)
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'start_job', state='*')
async def start_work(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–±–æ—Ç–µ"""
    await callback.answer()

    async with state.proxy() as data:
        city = data.get('current_city')

    job = base.get_job_photo_id(city, status=1)

    if job:
        async with state.proxy() as data:
            data['job_id'] = job[1]

        base.update_job_status(city, job[1], status=0)
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=job[0],
                             caption=f'–í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω —É—á–∞—Å—Ç–æ–∫ # {job[1]}\n'
                                     '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç.\n'
                                     '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é',
                             reply_markup=back_job_cancel)
        await state.set_state(User.first_report)

        # –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º
        asyncio.create_task(check_state_timeout(state, city, job[1], callback, params='start'))

        asyncio.create_task(job_timeout(state, city, job[1], callback))

    else:
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text='–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ',
                                    reply_markup=back)
        base.update_status(city, status=1)
        await state.finish()


@dp.message_handler(content_types=types.ContentType.PHOTO, state=User.first_report)
async def first_report(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã"""
    async with state.proxy() as data:
        data['first_report_image'] = message.photo[0].file_id
        city = data.get('current_city')
        job_id = data.get('job_id')

    await bot.send_message(chat_id=message.from_user.id,
                           text='–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ',
                           reply_markup=start_working
                           )

    # –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º
    asyncio.create_task(check_state_timeout(state, city, job_id, message, params='confirm'))

    await state.set_state(User.start_working)


@dp.callback_query_handler(lambda c: c.data == 'start_work', state=User.start_working)
async def started_work(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"""
    await callback.answer()
    async with state.proxy() as data:
        job_id = data.get('job_id')
        job_photo = data.get('first_report_image')
        city = data.get('current_city')

    await bot.send_photo(chat_id=GROUP_CHAT_ID,
                         photo=job_photo,
                         caption=f'–†–∞–±–æ—Ç–Ω–∏–∫ <a href="tg://user?id={callback.from_user.id}">{callback.from_user.full_name}</a> –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Ä–∞–±–æ—Ç–µ\n'
                                 f'–ì–æ—Ä–æ–¥: {city}\n'
                                 f'–ù–∞–∑–Ω–∞—á–µ–Ω —É—á–∞—Å—Ç–æ–∫: # {job_id}')

    await bot.edit_message_text(chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                text='–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ 5 –¥–æ–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç (—Ç–µ–∫—Å—Ç) –ø–æ —à–∞–±–ª–æ–Ω—É –∏–∑ —Ñ–æ—Ç–æ\n'
                                )

    with open('images/template.jpg', 'rb') as photo:
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=types.InputFile(photo),
                             reply_markup=user_send_report)
    await state.set_state(User.make_report)


@dp.callback_query_handler(lambda c: c.data == 'send_report', state=User.make_report)
async def report_work(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤"""
    await callback.answer()

    await bot.send_message(chat_id=callback.from_user.id,
                           text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–æ–º',
                           reply_markup=back_new)
    await state.set_state(User.send_report)


@dp.message_handler(state=User.send_report)
async def save_report(message: types.Message, state: FSMContext):
    """–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–∞. –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –∫–∞–Ω–∞–ª"""
    report = message.text
    async with state.proxy() as data:
        job_id = data.get('job_id')
        city = data.get('current_city')

    await bot.send_message(chat_id=GROUP_CHAT_ID,
                           text=f'–û—Ç—á–µ—Ç –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ <a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a>\n'
                                f'–ì–æ—Ä–æ–¥: {city}\n'
                                f'–ú–∞—Ä—à—Ä—É—Ç: # {job_id}\n'
                                f'{report}')
    await bot.send_message(message.from_user.id,
                           text='–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ',
                           reply_markup=user_new_report
                           )
    await state.set_state(User.make_report)


@dp.callback_query_handler(lambda c: c.data == 'end_work_job', state=User.make_report)
async def end_work(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –º–∞—Ä—à—Ä—É—Ç"""
    await callback.answer()

    async with state.proxy() as data:
        job_id = data.get('job_id')
        city = data.get('current_city')

    await bot.send_message(chat_id=GROUP_CHAT_ID,
                           text=f'–†–∞–±–æ—Ç–Ω–∏–∫ <a href="tg://user?id={callback.from_user.id}">{callback.from_user.full_name}</a> –∑–∞–≤–µ—Ä—à–∏–ª –º–∞—Ä—à—Ä—É—Ç\n'
                                f'–ì–æ—Ä–æ–¥: {city}\n'
                                f'–ú–∞—Ä—à—Ä—É—Ç: # {job_id}\n'
                           )

    await bot.edit_message_text(chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                text='–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
                                reply_markup=back)
    await state.set_state(User.end_job)


@dp.callback_query_handler(lambda c: c.data == 'jobs', state=Admin.job)
async def jobs(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    await callback.answer()
    await bot.edit_message_text(chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:',
                                reply_markup=jobs_config)
    await state.set_state(Admin.job_operation)


@dp.callback_query_handler(lambda c: c.data == 'get_job', state='*')
async def get_jobs(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è"""
    await callback.answer()
    async with state.proxy() as data:
        city = data.get('current_city')

    jobs_kb = get_jobs_kb(base, city)

    await bot.edit_message_text(chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                text='–í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã:',
                                reply_markup=jobs_kb)
    await state.set_state(Admin.jobs_list)


@dp.callback_query_handler(lambda c: c.data.startswith('job_'), state=Admin.jobs_list)
async def jods_view(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º"""
    await callback.answer()

    job_id = callback.data.replace('job_', '')

    async with state.proxy() as data:
        data['job_id'] = job_id
        city = data.get('current_city')

    photo = base.get_photo(city, job_id)

    await bot.send_photo(chat_id=callback.from_user.id,
                         photo=photo[0],
                         caption=f'–í—ã–±—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {job_id}',
                         reply_markup=kb_job_photo)
    await state.set_state(Admin.job_delete)


@dp.callback_query_handler(lambda c: c.data == 'delete_job_photo', state=Admin.job_delete)
async def delete_job_fucn(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"""
    await callback.answer()

    async with state.proxy() as data:
        city = data.get('current_city')
        job_id = data.get('job_id')

    base.delete_job(city, job_id)

    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'–ú–∞—Ä—à—Ä—É—Ç —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º "{job_id}" —É–¥–∞–ª–µ–Ω',
                           reply_markup=delete_job)
    await state.set_state(Admin.job_operation)


@dp.callback_query_handler(lambda c: c.data == 'new_job', state=Admin.job_operation)
async def new_job(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    await callback.answer()
    await bot.send_message(callback.from_user.id,
                           text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É:',
                           reply_markup=back)
    await state.set_state(Job.image)


@dp.message_handler(content_types=types.ContentType.PHOTO, state=Job.image)
async def process_image(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏"""
    async with state.proxy() as data:
        data['image'] = message.photo[0].file_id

    await message.reply('–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞:')
    await state.set_state(Job.text)


@dp.message_handler(state=Job.text)
async def save_job(message: types.Message, state: FSMContext):
    """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    async with state.proxy() as data:
        data['text'] = message.text
        current_city = data.get('current_city')

    if not base.get_job(current_city, data['text']):
        base.new_job(current_city, data['image'], data['text'], status=1)
        await bot.send_message(message.from_user.id, f'–ú–∞—Ä—à—Ä—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω',
                               reply_markup=job_add)
    else:
        await bot.send_message(message.from_user.id,
                               f'–ú–∞—Ä—à—Ä—É—Ç —Å id: {data["text"]} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω',
                               reply_markup=job_add)
    await state.set_state(Admin.job_operation)


async def check_state_timeout(state: FSMContext, city: str, job_id: str, update, params):
    # # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
    end_time = time.time() + 18000

    city = city
    job_id = job_id

    while time.time() < end_time:
        current_state = await state.get_state()

        if params == 'start':
            if current_state == User.first_report.state:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                await asyncio.sleep(1)
            else:
                return

        elif params == 'confirm':
            if current_state == User.start_working.state:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                await asyncio.sleep(1)
            else:
                return
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 5 —á–∞—Å–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –Ω–µ –±—ã–ª–æ - –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 1
        base.update_job_status(city, job_id, status=1)
        await bot.send_message(chat_id=update.from_user.id,
                               text='–ü—Ä–æ—à–ª–æ 5 —á–∞—Å–æ–≤. –í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É. –ú–∞—Ä—à—Ä—É—Ç –æ—Ç–æ–∑–≤–∞–Ω',
                               reply_markup=back)
        await state.finish()


async def job_timeout(state: FSMContext, city: str, job_id: str, update):
    end_timer = time.time() + 172800

    city = city
    job_id = job_id

    while time.time() < end_timer:
        current_state = await state.get_state()

        if current_state == User.end_job.state or current_state is None:
            return
        await asyncio.sleep(1)
    else:
        base.update_job_status(city, job_id, status=1)
        await bot.send_message(chat_id=update.from_user.id,
                               text='–ü—Ä–æ—à–ª–æ 48 —á–∞—Å–æ–≤. –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–º–µ–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞',
                               reply_markup=back)
        await state.finish()
